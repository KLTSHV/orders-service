// Code generated by MockGen. DO NOT EDIT.
// Source: demo/orders/internal/store (interfaces: Repository)

// Package storemock is a generated GoMock package.
package storemock

import (
	context "context"
	model "demo/orders/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(arg0 context.Context, arg1 string) (model.Order, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), arg0, arg1)
}

// LoadAllOrders mocks base method.
func (m *MockRepository) LoadAllOrders(arg0 context.Context) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllOrders", arg0)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllOrders indicates an expected call of LoadAllOrders.
func (mr *MockRepositoryMockRecorder) LoadAllOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllOrders", reflect.TypeOf((*MockRepository)(nil).LoadAllOrders), arg0)
}

// UpsertOrder mocks base method.
func (m *MockRepository) UpsertOrder(arg0 context.Context, arg1 model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOrder indicates an expected call of UpsertOrder.
func (mr *MockRepositoryMockRecorder) UpsertOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrder", reflect.TypeOf((*MockRepository)(nil).UpsertOrder), arg0, arg1)
}
